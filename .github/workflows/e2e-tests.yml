name: üé≠ E2E Tests with Playwright

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Executar testes di√°rios √†s 6:00 UTC para verificar se as APIs externas ainda funcionam
    - cron: '0 6 * * *'

jobs:
  e2e-tests:
    name: üé≠ End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: üì¶ Install dependencies
      run: |
        npm ci || npm install
        npx playwright install --with-deps chromium
        
    - name: üöÄ Start local server
      run: |
        npx http-server . -p 3000 &
        sleep 5
        
    - name: üåê Test application accessibility
      run: |
        # Verificar se o servidor est√° rodando
        curl -f http://localhost:3000 || exit 1
        echo "‚úÖ Application is accessible"
        
    - name: üé≠ Run Playwright tests
      run: |
        cat > playwright-test.js << 'EOF'
        const { chromium } = require('playwright');

        (async () => {
          console.log('üé≠ Starting Playwright E2E tests...');
          
          const browser = await chromium.launch();
          const page = await browser.newPage();
          
          try {
            // Navegar para a aplica√ß√£o
            console.log('üìù Navigating to application...');
            await page.goto('http://localhost:3000');
            
            // Verificar se a p√°gina carregou
            await page.waitForSelector('h1');
            const title = await page.textContent('h1');
            console.log(`‚úÖ Page loaded with title: ${title}`);
            
            // Verificar se os campos do formul√°rio est√£o presentes
            await page.waitForSelector('input[name="city"]');
            await page.waitForSelector('input[name="state"]');
            await page.waitForSelector('input[name="country"]');
            console.log('‚úÖ Form fields are present');
            
            // Simular preenchimento do formul√°rio (S√£o Paulo como exemplo)
            console.log('üìù Filling form with test data...');
            await page.fill('input[name="city"]', 'S√£o Paulo');
            await page.fill('input[name="state"]', 'S√£o Paulo');
            await page.fill('input[name="country"]', 'Brasil');
            
            // Verificar se o bot√£o de envio existe
            const submitButton = await page.isVisible('button:has-text("Consultar")');
            console.log(`‚úÖ Submit button visible: ${submitButton}`);
            
            // Verificar estrutura b√°sica da p√°gina
            const hasForm = await page.isVisible('form');
            const hasStyles = await page.evaluate(() => {
              const link = document.querySelector('link[href="styles.css"]');
              return !!link;
            });
            const hasScript = await page.evaluate(() => {
              const script = document.querySelector('script[src="script.js"]');
              return !!script;
            });
            
            console.log(`‚úÖ Form present: ${hasForm}`);
            console.log(`‚úÖ CSS linked: ${hasStyles}`);
            console.log(`‚úÖ JavaScript linked: ${hasScript}`);
            
            // Verificar responsividade b√°sica
            await page.setViewportSize({ width: 375, height: 667 }); // Mobile
            const mobileVisible = await page.isVisible('h1');
            console.log(`‚úÖ Mobile responsive: ${mobileVisible}`);
            
            await page.setViewportSize({ width: 1200, height: 800 }); // Desktop
            const desktopVisible = await page.isVisible('h1');
            console.log(`‚úÖ Desktop responsive: ${desktopVisible}`);
            
            console.log('üéâ All E2E tests passed!');
            
          } catch (error) {
            console.error('‚ùå E2E test failed:', error.message);
            process.exit(1);
          } finally {
            await browser.close();
          }
        })();
        EOF
        
        npx playwright install chromium
        node playwright-test.js
        
    - name: üîç API Integration Test
      run: |
        cat > api-test.js << 'EOF'
        const https = require('https');
        const http = require('http');

        function makeRequest(url) {
          return new Promise((resolve, reject) => {
            const client = url.startsWith('https') ? https : http;
            const request = client.get(url, (response) => {
              let data = '';
              response.on('data', chunk => data += chunk);
              response.on('end', () => {
                resolve({ status: response.statusCode, data });
              });
            });
            request.on('error', reject);
            request.setTimeout(10000, () => {
              request.destroy();
              reject(new Error('Request timeout'));
            });
          });
        }

        (async () => {
          console.log('üåê Testing API integrations...');
          
          try {
            // Test Nominatim API
            console.log('üìç Testing Nominatim geocoding API...');
            const geocodeUrl = 'https://nominatim.openstreetmap.org/search?q=S√£o Paulo,Brasil&format=json&limit=1';
            const geocodeResponse = await makeRequest(geocodeUrl);
            
            if (geocodeResponse.status === 200) {
              const geocodeData = JSON.parse(geocodeResponse.data);
              if (geocodeData.length > 0) {
                console.log('‚úÖ Nominatim API is working');
              } else {
                console.log('‚ö†Ô∏è Nominatim API returned empty results');
              }
            } else {
              console.log(`‚ö†Ô∏è Nominatim API returned status: ${geocodeResponse.status}`);
            }
            
            // Test Open-Meteo API
            console.log('üå¨Ô∏è Testing Open-Meteo Air Quality API...');
            const airQualityUrl = 'https://air-quality-api.open-meteo.com/v1/air-quality?latitude=-23.5505&longitude=-46.6333&current=european_aqi&timezone=auto';
            const airResponse = await makeRequest(airQualityUrl);
            
            if (airResponse.status === 200) {
              const airData = JSON.parse(airResponse.data);
              if (airData.current) {
                console.log('‚úÖ Open-Meteo Air Quality API is working');
              } else {
                console.log('‚ö†Ô∏è Open-Meteo API returned unexpected format');
              }
            } else {
              console.log(`‚ö†Ô∏è Open-Meteo API returned status: ${airResponse.status}`);
            }
            
            console.log('üéâ API integration tests completed!');
            
          } catch (error) {
            console.log(`‚ö†Ô∏è API test warning: ${error.message}`);
            console.log('Note: API tests may fail due to network conditions, this is not critical for deployment');
          }
        })();
        EOF
        
        node api-test.js

  mobile-test:
    name: üì± Mobile Compatibility Test
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: üì¶ Install dependencies
      run: |
        npm ci || npm install
        npx playwright install --with-deps chromium
        
    - name: üöÄ Start local server
      run: |
        npx http-server . -p 3000 &
        sleep 5
        
    - name: üì± Test mobile viewports
      run: |
        cat > mobile-test.js << 'EOF'
        const { chromium } = require('playwright');

        const mobileDevices = [
          { name: 'iPhone 12', width: 390, height: 844 },
          { name: 'Samsung Galaxy S21', width: 384, height: 854 },
          { name: 'iPad', width: 768, height: 1024 },
          { name: 'Small Mobile', width: 320, height: 568 }
        ];

        (async () => {
          console.log('üì± Testing mobile compatibility...');
          
          const browser = await chromium.launch();
          
          for (const device of mobileDevices) {
            console.log(`üì± Testing ${device.name} (${device.width}x${device.height})`);
            
            const page = await browser.newPage();
            await page.setViewportSize({ width: device.width, height: device.height });
            
            try {
              await page.goto('http://localhost:3000');
              await page.waitForSelector('h1', { timeout: 5000 });
              
              // Verificar se elementos principais s√£o vis√≠veis
              const titleVisible = await page.isVisible('h1');
              const formVisible = await page.isVisible('form');
              const cityInputVisible = await page.isVisible('input[name="city"]');
              const submitButtonVisible = await page.isVisible('button[type="submit"]');
              
              console.log(`  ‚úÖ Title visible: ${titleVisible}`);
              console.log(`  ‚úÖ Form visible: ${formVisible}`);
              console.log(`  ‚úÖ City input visible: ${cityInputVisible}`);
              console.log(`  ‚úÖ Submit button visible: ${submitButtonVisible}`);
              
              if (!titleVisible || !formVisible || !cityInputVisible || !submitButtonVisible) {
                console.log(`  ‚ö†Ô∏è Some elements not visible on ${device.name}`);
              } else {
                console.log(`  üéâ ${device.name} test passed!`);
              }
              
            } catch (error) {
              console.log(`  ‚ùå Error testing ${device.name}: ${error.message}`);
            } finally {
              await page.close();
            }
          }
          
          await browser.close();
          console.log('üì± Mobile compatibility tests completed!');
        })();
        EOF
        
        node mobile-test.js
